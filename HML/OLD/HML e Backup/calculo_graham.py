# -*- coding: utf-8 -*-
"""
üß™ Script de Teste - F√≥rmula de Graham

Este script isolado serve para testar a coleta dos dados necess√°rios
para o c√°lculo do N√∫mero de Graham e da Margem de Seguran√ßa.

1. L√™ os tickers do arquivo 'data/acoes_e_fundos.csv'.
2. Para cada ticker, busca via yfinance:
   - 'trailingEps' (LPA - Lucro por A√ß√£o)
   - 'bookValue' (VPA - Valor Patrimonial por A√ß√£o) 
   - 'currentPrice' (Pre√ßo Atual)
3. Calcula o N√∫mero de Graham e a Margem de Seguran√ßa.
4. Imprime os resultados na tela para valida√ß√£o.
5. Salva os resultados em um arquivo CSV para an√°lise.
"""

import pandas as pd
import yfinance as yf
from tqdm.auto import tqdm
from pathlib import Path
import numpy as np

# --- Configura√ß√µes ---
BASE = Path(__file__).resolve().parent.parent / 'data'
CAMINHO_ARQUIVO_ENTRADA = BASE / "acoes_e_fundos.csv"
CAMINHO_ARQUIVO_SAIDA = BASE / "teste_graham_resultados.csv" # Novo arquivo de sa√≠da

def calcular_graham(ticker_base: str) -> dict | None:
    """Busca dados, calcula o N√∫mero de Graham e retorna um dicion√°rio com os resultados."""
    try:
        ticker_yf = f"{ticker_base}.SA"
        stock = yf.Ticker(ticker_yf)
        info = stock.info

        lpa = info.get("trailingEps")
        vpa = info.get("bookValue")
        preco_atual = info.get("currentPrice")

        # Valida√ß√£o dos dados: LPA e VPA devem ser positivos para a f√≥rmula
        if lpa is None or vpa is None or preco_atual is None or lpa <= 0 or vpa <= 0:
            return None

        # F√≥rmula de Graham: Valor Intr√≠nseco = Raiz(22.5 * LPA * VPA)
        numero_graham = np.sqrt(22.5 * lpa * vpa)

        # Margem de Seguran√ßa = (Valor Intr√≠nseco / Pre√ßo Atual) - 1
        margem_seguranca = (numero_graham / preco_atual) - 1

        # Imprime na tela para feedback em tempo real
        print(f"\n--- {ticker_base} ({info.get('longName', 'N/A')}) ---")
        print(f"  Pre√ßo Atual: R$ {preco_atual:.2f}")
        print(f"  LPA (Lucro por A√ß√£o): R$ {lpa:.2f}")
        print(f"  VPA (Valor Patrimonial por A√ß√£o): R$ {vpa:.2f}")
        print(f"  => N√∫mero de Graham (Pre√ßo Justo): R$ {numero_graham:.2f}")
        print(f"  => Margem de Seguran√ßa: {margem_seguranca:.2%}")

        # Retorna os dados para serem salvos no CSV
        return {
            "ticker": ticker_base,
            "empresa": info.get('longName', 'N/A'),
            "preco_atual": preco_atual,
            "lpa": lpa,
            "vpa": vpa,
            "numero_graham": numero_graham,
            "margem_seguranca_percent": margem_seguranca * 100
        }

    except Exception:
        # Ignora erros de tickers n√£o encontrados ou outros problemas de API
        return None

def main():
    df_input = pd.read_csv(CAMINHO_ARQUIVO_ENTRADA)
    
    resultados_graham = []
    for ticker in tqdm(df_input["ticker"].unique(), desc="Calculando Graham"):
        dados = calcular_graham(ticker.strip().upper())
        if dados:
            resultados_graham.append(dados)

    if not resultados_graham:
        print("\n‚ö†Ô∏è Nenhum dado v√°lido foi calculado. O arquivo CSV n√£o ser√° gerado.")
        return

    # Converte a lista de dicion√°rios em um DataFrame e arredonda os valores
    df_output = pd.DataFrame(resultados_graham).round(2)
    df_output.to_csv(CAMINHO_ARQUIVO_SAIDA, index=False, encoding='utf-8-sig', float_format='%.2f')
    print(f"\n‚úÖ Resultados salvos com sucesso em: {CAMINHO_ARQUIVO_SAIDA}")

if __name__ == "__main__":
    main()