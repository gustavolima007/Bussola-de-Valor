# -*- coding: utf-8 -*-
"""
 sectoral Performance Evaluation Script

This script evaluates the performance of different economic sectors based on the
average score of the assets that compose them.

Process Steps:
1.  Loads the scores from 'data/scores.csv' and the asset list from
    'data/acoes_e_fundos.csv'.
2.  Merges the two datasets using the ticker as a key.
3.  Groups the data by sector and calculates the average `score_total` for each.
4.  Translates the sector names from English to Portuguese using predefined
    dictionaries for a full and a summarized version.
5.  Saves the resulting sector performance ranking in
    'data/avaliacao_setor.csv'.
"""

from pathlib import Path
import pandas as pd

# --- Dictionaries for Sector Translation ---
# Full translation from English (Brapi) to Portuguese
TRADUCAO_SETORES_B3 = {
    "Energy Minerals": "Petr√≥leo, G√°s e Biocombust√≠veis",
    "Non-Energy Minerals": "Materiais B√°sicos ‚Äì Minera√ß√£o e Siderurgia",
    "Process Industries": "Materiais B√°sicos ‚Äì Papel, Qu√≠mica e Outros",
    "Utilities": "Utilidade P√∫blica ‚Äì Energia El√©trica, √Ågua e Saneamento",
    "Finance": "Financeiro e Outros ‚Äì Bancos, Seguros, Servi√ßos Financeiros",
    "Health Technology": "Sa√∫de ‚Äì Equipamentos e Tecnologia",
    "Health Services": "Sa√∫de ‚Äì Servi√ßos M√©dicos e Hospitalares",
    "Producer Manufacturing": "Bens Industriais ‚Äì M√°quinas e Equipamentos",
    "Industrial Services": "Bens Industriais ‚Äì Servi√ßos Industriais",
    "Transportation": "Bens Industriais ‚Äì Transporte e Log√≠stica",
    "Retail Trade": "Consumo C√≠clico ‚Äì Com√©rcio Varejista",
    "Consumer Durables": "Consumo C√≠clico ‚Äì Bens Dur√°veis (Eletrodom√©sticos, Autom√≥veis)",
    "Consumer Services": "Consumo C√≠clico ‚Äì Servi√ßos (Educa√ß√£o, Turismo)",
    "Commercial Services": "Consumo C√≠clico ‚Äì Servi√ßos Comerciais",
    "Electronic Technology": "Tecnologia da Informa√ß√£o ‚Äì Hardware e Equipamentos",
    "Technology Services": "Tecnologia da Informa√ß√£o ‚Äì Servi√ßos de Software",
    "Communications": "Comunica√ß√µes e Telecom ‚Äì Telefonia, Internet e M√≠dia",
    "Consumer Non-Durables": "Consumo n√£o C√≠clico ‚Äì Alimentos, Bebidas e Produtos Pessoais",
    "Distribution Services": "Consumo n√£o C√≠clico ‚Äì Com√©rcio e Distribui√ß√£o"
}

# Summarized translation for easier display
TRADUCAO_SETORES_RESUMIDA = {
    "Petr√≥leo, G√°s e Biocombust√≠veis": "Petr√≥leo, G√°s e Biocombust√≠veis",
    "Materiais B√°sicos ‚Äì Minera√ß√£o e Siderurgia": "Minera√ß√£o e Siderurgia",
    "Materiais B√°sicos ‚Äì Papel, Qu√≠mica e Outros": "Papel, Qu√≠mica e Outros",
    "Utilidade P√∫blica ‚Äì Energia El√©trica, √Ågua e Saneamento": "Energia El√©trica e Saneamento",
    "Financeiro e Outros ‚Äì Bancos, Seguros, Servi√ßos Financeiros": "Bancos, Seguros e Financeiros",
    "Sa√∫de ‚Äì Equipamentos e Tecnologia": "Sa√∫de ‚Äì Tecnologia e Equipamentos",
    "Sa√∫de ‚Äì Servi√ßos M√©dicos e Hospitalares": "Sa√∫de ‚Äì Servi√ßos M√©dicos",
    "Bens Industriais ‚Äì M√°quinas e Equipamentos": "M√°quinas e Equipamentos Industriais",
    "Bens Industriais ‚Äì Servi√ßos Industriais": "Servi√ßos Industriais",
    "Bens Industriais ‚Äì Transporte e Log√≠stica": "Transporte e Log√≠stica",
    "Consumo C√≠clico ‚Äì Com√©rcio Varejista": "Com√©rcio Varejista",
    "Consumo C√≠clico ‚Äì Bens Dur√°veis (Eletrodom√©sticos, Autom√≥veis)": "Bens Dur√°veis (Eletro e Autos)",
    "Consumo C√≠clico ‚Äì Servi√ßos (Educa√ß√£o, Turismo)": "Servi√ßos de Educa√ß√£o e Turismo",
    "Consumo C√≠clico ‚Äì Servi√ßos Comerciais": "Servi√ßos Comerciais",
    "Tecnologia da Informa√ß√£o ‚Äì Hardware e Equipamentos": "Tecnologia ‚Äì Hardware",
    "Tecnologia da Informa√ß√£o ‚Äì Servi√ßos de Software": "Tecnologia ‚Äì Software",
    "Comunica√ß√µes e Telecom ‚Äì Telefonia, Internet e M√≠dia": "Telefonia, Internet e M√≠dia",
    "Consumo n√£o C√≠clico ‚Äì Alimentos, Bebidas e Produtos Pessoais": "Alimentos, Bebidas e Higiene",
    "Consumo n√£o C√≠clico ‚Äì Com√©rcio e Distribui√ß√£o": "Distribui√ß√£o e Com√©rcio"
}

def main() -> None:
    """Main function to orchestrate the sector evaluation process."""
    # --- Path Setup ---
    data_dir = Path(__file__).resolve().parent.parent / "data"
    scores_path = data_dir / "scores.csv"
    acoes_path = data_dir / "acoes_e_fundos.csv"
    output_path = data_dir / "avaliacao_setor.csv"

    # --- Data Loading ---
    print(f"Loading scores from: {scores_path}")
    scores_df = pd.read_csv(scores_path)
    print(f"Loading asset data from: {acoes_path}")
    acoes_df = pd.read_csv(acoes_path)

    # --- Data Preparation and Merging ---
    print("Merging scores with sector data...")
    # Normalize ticker in acoes_df to match scores_df (e.g., 'BBAS3.SA' -> 'BBAS3')
    acoes_df["ticker_base"] = acoes_df["ticker"].str.upper().str.strip()
    scores_df["ticker_base"] = scores_df["ticker"].str.upper().str.strip()

    # Select necessary columns and merge
    merged_df = pd.merge(
        scores_df[["ticker_base", "score_total"]],
        acoes_df[["ticker_base", "setor_brapi"]],
        on="ticker_base",
        how="inner"
    ).drop_duplicates("ticker_base")

    # --- Sector Performance Calculation ---
    print("Calculating average score per sector...")
    setor_performance = (
        merged_df.groupby("setor_brapi")["score_total"]
        .mean()
        .reset_index()
        .rename(columns={"setor_brapi": "setor", "score_total": "pontuacao"})
        .sort_values("pontuacao", ascending=False)
    )

    # --- Translation and Formatting ---
    print("Translating sector names...")
    # Apply full and summarized translations
    setor_performance['setor'] = setor_performance['setor'].map(TRADUCAO_SETORES_B3).fillna(setor_performance['setor'])
    setor_performance['setor_resumido'] = setor_performance['setor'].map(TRADUCAO_SETORES_RESUMIDA).fillna(setor_performance['setor'])
    setor_performance['pontuacao'] = setor_performance['pontuacao'].round(2)

    # --- Saving the Result ---
    setor_performance.to_csv(output_path, index=False, float_format='%.2f')
    print(f"\n‚úÖ Sector evaluation file saved successfully at: {output_path}")

    # --- Displaying Results ---
    print("\n--- Sector Performance (Average Score) ---")
    print(setor_performance)

    if not setor_performance.empty:
        best_sector = setor_performance.iloc[0]
        print(f"\nüèÜ Best Performing Sector: {best_sector['setor_resumido']} (Average Score: {best_sector['pontuacao']:.2f})")

if __name__ == "__main__":
    main()