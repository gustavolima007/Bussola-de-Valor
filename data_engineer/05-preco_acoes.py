# -*- coding: utf-8 -*-
"""
üìà Script para Coleta de Pre√ßos Hist√≥ricos de A√ß√µes

Este script busca os pre√ßos de fechamento ajustados de uma lista de tickers
da B3, utilizando a biblioteca yfinance, e gera dois arquivos de sa√≠da:

1.  `precos_acoes_completo.csv`: Cont√©m o pre√ßo de fechamento do √∫ltimo dia
    de cada ano para os √∫ltimos 7 anos.
2.  `precos_acoes.csv`: Um resumo com o pre√ßo atual e de 1 e 6 meses atr√°s.

Etapas do Processo:
- L√™ a lista de tickers de 'data/acoes_e_fundos.csv'.
- Adiciona o sufixo '.SA' aos tickers para consulta no yfinance.
- Baixa o hist√≥rico de pre√ßos dos √∫ltimos 7 anos.
- Processa os dados para extrair os pre√ßos de fechamento anuais e o atual/mensal.
- Salva os dois DataFrames resultantes em arquivos CSV.
"""

import pandas as pd
import yfinance as yf
from datetime import date
import warnings
from pathlib import Path
from tqdm.auto import tqdm

# Ignora avisos de FutureWarning para manter o output limpo
warnings.simplefilter(action='ignore', category=FutureWarning)

def ler_tickers_do_csv(caminho_do_arquivo: str, coluna_ticker: str = 'ticker') -> list:
    """
    L√™ um arquivo CSV e extrai uma lista de tickers √∫nicos de uma coluna espec√≠fica.

    Args:
        caminho_do_arquivo (str): O caminho completo para o arquivo CSV.
        coluna_ticker (str): O nome da coluna que cont√©m os tickers.

    Returns:
        list: Uma lista de tickers √∫nicos. Retorna uma lista vazia em caso de erro.
    """
    try:
        df = pd.read_csv(caminho_do_arquivo)
        if coluna_ticker not in df.columns:
            print(f"Erro: A coluna '{coluna_ticker}' n√£o foi encontrada.")
            return []
        return df[coluna_ticker].dropna().unique().tolist()
    except FileNotFoundError:
        print(f"Erro: Arquivo n√£o encontrado em '{caminho_do_arquivo}'.")
        return []
    except Exception as e:
        print(f"Ocorreu um erro inesperado ao ler o arquivo: {e}")
        return []

def gerar_tabela_comparativa_precos(lista_tickers: list, anos_anteriores: int = 7) -> tuple[pd.DataFrame, pd.DataFrame] | tuple[None, None]:
    """
    Busca o pre√ßo de fechamento ajustado para uma lista de tickers e gera duas tabelas:
    uma completa com dados anuais e uma resumida com o pre√ßo atual e mensal.

    Args:
        lista_tickers (list): A lista de tickers a serem processados.
        anos_anteriores (int): O n√∫mero de anos a serem analisados no hist√≥rico.

    Returns:
        tuple: Uma tupla contendo o DataFrame completo e o DataFrame resumido.
               Retorna (None, None) se ocorrer um erro.
    """
    try:
        # Adiciona o sufixo .SA para compatibilidade com o yfinance
        tickers_sa = [f"{t.upper()}.SA" for t in lista_tickers]
        hoje = date.today()
        ano_inicio = hoje.year - anos_anteriores

        # Define as datas de refer√™ncia para 1 e 6 meses atr√°s
        data_1_mes_atras = pd.to_datetime(hoje) - pd.DateOffset(months=1)
        data_6_meses_atras = pd.to_datetime(hoje) - pd.DateOffset(months=6)

        print(f"Baixando dados hist√≥ricos para {len(tickers_sa)} ativos...")
        # Baixa os dados de uma vez para otimizar as requisi√ß√µes
        hist = yf.download(tickers_sa, start=f"{ano_inicio}-01-01", end=hoje, auto_adjust=True, progress=False)

        if hist.empty:
            print("Nenhum dado hist√≥rico foi retornado pelo yfinance.")
            return None, None

        df_closes = hist['Close']
        lista_completa, lista_resumida = [], []

        # Itera sobre os tickers para processar os pre√ßos
        for ticker, ticker_sa in tqdm(list(zip(lista_tickers, tickers_sa)), desc="Processando pre√ßos por ticker"):
            col = df_closes.get(ticker_sa)
            if col is None or col.dropna().empty:
                print(f"Aviso: Nenhum dado encontrado para o ticker {ticker}. Pulando.")
                continue

            # Pre√ßo de fechamento mais recente
            fechamento_atual = col.dropna().iloc[-1]

            # Busca os pre√ßos de 1 e 6 meses atr√°s usando .asof()
            # O .asof() encontra o √∫ltimo valor v√°lido na data ou antes dela (lida com fins de semana/feriados)
            fechamento_1M_atras = col.asof(data_1_mes_atras)
            fechamento_6M_atras = col.asof(data_6_meses_atras)

            # Adiciona os novos campos ao dicion√°rio da lista resumida
            lista_resumida.append({
                'ticker': ticker,
                'fechamento_atual': fechamento_atual,
                'fechamento_1M_atras': fechamento_1M_atras,
                'fechamento_6M_atras': fechamento_6M_atras
            })
            
            lista_completa.append({'ticker': ticker, 'ano': hoje.year, 'fechamento': fechamento_atual})

            # Pre√ßos de fechamento dos anos anteriores (l√≥gica original mantida)
            for j in range(anos_anteriores):
                ano_alvo = hoje.year - (j + 1)
                try:
                    fechamento_ano = df_closes.loc[str(ano_alvo), ticker_sa].dropna().iloc[-1]
                except (KeyError, IndexError):
                    fechamento_ano = None
                lista_completa.append({'ticker': ticker, 'ano': ano_alvo, 'fechamento': fechamento_ano})

        if not lista_completa:
            print("Nenhum resultado foi processado com sucesso.")
            return None, None

        # Cria os DataFrames a partir das listas
        df_completo = pd.DataFrame(lista_completa)
        df_resumido = pd.DataFrame(lista_resumida).set_index('ticker')
        return df_completo, df_resumido

    except Exception as e:
        print(f"Ocorreu um erro inesperado durante o processamento: {e}")
        return None, None

# --- Bloco de Execu√ß√£o Principal ---
if __name__ == "__main__":
    # Define os caminhos dos arquivos de entrada e sa√≠da
    # Ajuste o caminho para subir um n√≠vel (do 'data_engineer' para a raiz do projeto)
    repo_root = Path(__file__).resolve().parent.parent 
    
    csv_path = repo_root / "data" / "acoes_e_fundos.csv"
    output_folder = repo_root / "data"

    print(f"Iniciando o script de coleta de pre√ßos...")
    ativos_alvo = ler_tickers_do_csv(str(csv_path))

    if ativos_alvo:
        print(f"Processando {len(ativos_alvo)} ativos. Amostra: {ativos_alvo[:5]}...")
        anos_para_analise = 7
        tabela_completa, tabela_resumida = gerar_tabela_comparativa_precos(ativos_alvo, anos_anteriores=anos_para_analise)

        if tabela_completa is not None and tabela_resumida is not None:
            output_folder.mkdir(parents=True, exist_ok=True)

            output_path_completo = output_folder / "precos_acoes_completo.csv"
            tabela_completa['fechamento'] = tabela_completa['fechamento'].round(2)
            tabela_completa.to_csv(output_path_completo, index=False, encoding='utf-8-sig')
            print(f"\nTabela completa salva em: {output_path_completo}")

            output_path_resumido = output_folder / "precos_acoes.csv"
            tabela_resumida.round(2).to_csv(output_path_resumido, encoding='utf-8-sig')
            print(f"Tabela resumida salva em: {output_path_resumido}")

            print(f"\nEstat√≠sticas da Execu√ß√£o:")
            print(f"   - Total de ativos processados com sucesso: {len(tabela_resumida)}")
            print(f"   - Per√≠odo de an√°lise: {anos_para_analise} anos")
            print(f"   - Total de registros na tabela completa: {len(tabela_completa)}")
            print(f"   - Data da execu√ß√£o: {date.today().strftime('%d/%m/%Y')}")
        else:
            print("\n‚ùå N√£o foi poss√≠vel gerar as tabelas de pre√ßos.")
    else:
        print("\n‚ö†Ô∏è Nenhum ativo para processar. Verifique o arquivo CSV de entrada.")