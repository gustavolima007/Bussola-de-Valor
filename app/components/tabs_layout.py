# app/components/tabs_layout.py
import streamlit as st
import pandas as pd
import plotly.express as px

# --- Fun√ß√µes para cada Aba ---

def style_dy(val):
    """Aplica cor verde para DY >= 6% e vermelho para < 6%."""
    if pd.isna(val):
        return ''
    color = '#3dd56d' if val >= 6 else '#ff4b4b'
    return f'color: {color}'

def style_alvo(val):
    """Aplica cor verde para Alvo >= 0 e vermelho para < 0."""
    if pd.isna(val):
        return ''
    color = '#3dd56d' if val >= 0 else '#ff4b4b'
    return f'color: {color}'

def style_graham(val):
    """Aplica cor baseada na margem de seguran√ßa Graham."""
    if pd.isna(val):
        return ''
    if val > 100:
        color = '#3dd56d'  # Verde para excepcional (>100%)
    elif val >= 50:
        color = '#3dd56d'  # Verde para muito boa (50-100%)
    elif val >= 20:
        color = '#ffaa00'  # Amarelo para boa (20-50%)
    elif val >= 0:
        color = '#ffaa00'  # Amarelo para aceit√°vel (0-20%)
    else:
        color = '#ff4b4b'  # Vermelho para risco (<0%)
    return f'color: {color}'

def style_pl(val):
    """Aplica cor baseada no P/L."""
    if pd.isna(val) or val <= 0:
        return ''
    if val < 12:
        color = '#3dd56d'  # Verde
    elif val < 18:
        color = '#ffaa00'  # Amarelo
    else:
        color = '#ff4b4b'  # Vermelho
    return f'color: {color}'

def style_pvp(val):
    """Aplica cor baseada no P/VP."""
    if pd.isna(val) or val <= 0:
        return ''
    if val < 1.5:
        color = '#3dd56d'  # Verde
    elif val < 2.5:
        color = '#ffaa00'  # Amarelo
    else:
        color = '#ff4b4b'  # Vermelho
    return f'color: {color}'

def style_payout(val):
    """Aplica cor baseada no Payout."""
    if pd.isna(val):
        return ''
    if 30 <= val <= 80:
        color = '#3dd56d'  # Verde
    else:
        color = '#ff4b4b'  # Vermelho
    return f'color: {color}'

def style_roe(val):
    """Aplica cor baseada no ROE."""
    if pd.isna(val):
        return ''
    if val > 15:
        color = '#3dd56d'  # Verde
    elif val > 8:
        color = '#ffaa00'  # Amarelo
    else:
        color = '#ff4b4b'  # Vermelho
    return f'color: {color}'

def style_div_mc(val):
    """Aplica cor baseada na D√≠vida/Market Cap."""
    if pd.isna(val):
        return ''
    if val < 0.5:
        color = '#3dd56d'  # Verde
    elif val < 1.0:
        color = '#ffaa00'  # Amarelo
    else:
        color = '#ff4b4b'  # Vermelho
    return f'color: {color}'

def style_div_ebitda(val):
    """Aplica cor baseada na D√≠vida/EBITDA."""
    if pd.isna(val) or val < 0:
        return ''
    if val < 2:
        color = '#3dd56d'  # Verde
    elif val < 4:
        color = '#ffaa00'  # Amarelo
    else:
        color = '#ff4b4b'  # Vermelho
    return f'color: {color}'

def style_cresc(val):
    """Aplica cor baseada no Crescimento Pre√ßo (5A)."""
    if pd.isna(val):
        return ''
    if val > 15:
        color = '#3dd56d'  # Verde
    elif val > 5:
        color = '#ffaa00'  # Amarelo
    else:
        color = '#ff4b4b'  # Vermelho
    return f'color: {color}'

def style_pontuacao_final(val):
    """Aplica cor com base na Pontua√ß√£o Final do Setor."""
    if pd.isna(val):
        return ''
    if val > 60:
        color = '#3dd56d'  # Verde
    elif val > 40:
        color = '#ffaa00'  # Amarelo
    else:
        color = '#ff4b4b'  # Vermelho
    return f'color: {color}'

def render_tab_rank_geral(df: pd.DataFrame):
    st.header(f"üèÜ Ranking ({len(df)} a√ß√µes encontradas)")
    cols_to_display = ['Logo', 'Ticker', 'Empresa', 'subsetor_b3', 'Perfil da A√ß√£o', 'Pre√ßo Atual', 'Pre√ßo Teto 5A', 'Alvo', 'margem_seguranca_percent', 'DY (Taxa 12m, %)', 'DY 5 Anos M√©dia (%)', 'Score Total']
    df_display = df[[col for col in cols_to_display if col in df.columns]].rename(columns={'subsetor_b3': 'Setor', 'margem_seguranca_percent': 'Margem de Seguran√ßa %'})

    styler = df_display.style
    df_cols = df_display.columns

    dy_cols_to_style = [c for c in ['DY 5 Anos M√©dia (%)', 'DY (Taxa 12m, %)'] if c in df_cols]
    if dy_cols_to_style:
        styler.map(style_dy, subset=dy_cols_to_style)

    if 'Alvo' in df_cols:
        styler.map(style_alvo, subset=['Alvo'])

    if 'Margem de Seguran√ßa %' in df_cols:
        styler.map(style_graham, subset=['Margem de Seguran√ßa %'])

    st.dataframe(
        styler,
        column_config={
            "Logo": st.column_config.ImageColumn("Logo"),
            "Pre√ßo Atual": st.column_config.NumberColumn("Pre√ßo Atual", format="R$ %.2f"),
            "Pre√ßo Teto 5A": st.column_config.NumberColumn("Pre√ßo Teto 5A", format="R$ %.2f"),
            "Alvo": st.column_config.NumberColumn("Alvo %", format="%.2f%% "),
            "Margem de Seguran√ßa %": st.column_config.NumberColumn("Margem Seguran√ßa %", format="%.2f%%",),
            "DY (Taxa 12m, %)": st.column_config.NumberColumn("DY 12m", format="%.2f%% "),
            "DY 5 Anos M√©dia (%)": st.column_config.NumberColumn("DY 5 Anos", format="%.2f%% "),
            "Score Total": st.column_config.ProgressColumn("Score", format="%d", min_value=0, max_value=200),
        },
        use_container_width=True, hide_index=True
    )

def render_tab_rank_detalhado(df: pd.DataFrame):
    st.header(f"üìã Indices ({len(df)} a√ß√µes encontradas)")
    cols = [
        'Logo', 'Ticker', 'Empresa', 'subsetor_b3', 'Perfil da A√ß√£o', 'Pre√ßo Atual',
        'P/L', 'P/VP', 'margem_seguranca_percent', 'DY (Taxa 12m, %)', 'DY 5 Anos M√©dia (%)', 'Payout Ratio (%)',
        'ROE (%)', 'D√≠vida/Market Cap', 'D√≠vida/EBITDA', 'Crescimento Pre√ßo (%)', 'Sentimento Gauge', 'Score Total'
    ]
    df_display = df[[c for c in cols if c in df.columns]].rename(columns={'subsetor_b3': 'Setor', 'margem_seguranca_percent': 'Margem de Seguran√ßa %'})
    
    styler = df_display.style
    df_cols = df_display.columns

    dy_cols_to_style = [c for c in ['DY 5 Anos M√©dia (%)', 'DY (Taxa 12m, %)'] if c in df_cols]
    if dy_cols_to_style:
        styler.map(style_dy, subset=dy_cols_to_style)

    if 'Margem de Seguran√ßa %' in df_cols:
        styler.map(style_graham, subset=['Margem de Seguran√ßa %'])
    
    if 'P/L' in df_cols:
        styler.map(style_pl, subset=['P/L'])

    if 'P/VP' in df_cols:
        styler.map(style_pvp, subset=['P/VP'])

    if 'Payout Ratio (%)' in df_cols:
        styler.map(style_payout, subset=['Payout Ratio (%)'])

    if 'ROE (%)' in df_cols:
        styler.map(style_roe, subset=['ROE (%)'])

    if 'D√≠vida/Market Cap' in df_cols:
        styler.map(style_div_mc, subset=['D√≠vida/Market Cap'])

    if 'D√≠vida/EBITDA' in df_cols:
        styler.map(style_div_ebitda, subset=['D√≠vida/EBITDA'])

    if 'Crescimento Pre√ßo (%)' in df_cols:
        styler.map(style_cresc, subset=['Crescimento Pre√ßo (%)'])

    st.dataframe(
        styler,
        column_config={
            "Logo": st.column_config.ImageColumn("Logo"),
            "Pre√ßo Atual": st.column_config.NumberColumn("Pre√ßo Atual", format="R$ %.2f"),
            "Margem de Seguran√ßa %": st.column_config.NumberColumn("Margem Seguran√ßa %", format="%.2f%%",),
            "DY (Taxa 12m, %)": st.column_config.NumberColumn("DY 12m", format="%.2f%% "),
            "DY 5 Anos M√©dia (%)": st.column_config.NumberColumn("DY 5 Anos", format="%.2f%% "),
            "Payout Ratio (%)": st.column_config.NumberColumn("Payout", format="%.1f%% "),
            "ROE (%)": st.column_config.NumberColumn("ROE", format="%.2f%% "),
            "D√≠vida/Market Cap": st.column_config.NumberColumn("D√≠v/MCap", format="%.2f"),
            "D√≠vida/EBITDA": st.column_config.NumberColumn("D√≠v/EBITDA", format="%.2f"),
            "Crescimento Pre√ßo (%)": st.column_config.NumberColumn("Cresc. 5A", format="%.1f%% "),
            "Sentimento Gauge": st.column_config.NumberColumn("Sentimento", format="%d/100"),
            "Score Total": st.column_config.ProgressColumn("Score", format="%d", min_value=0, max_value=200),
        },
        use_container_width=True, hide_index=True
    )

def render_tab_analise_individual(df: pd.DataFrame):
    st.header("üî¨ An√°lise Individual e Composi√ß√£o do Score")
    if df.empty:
        st.info("Nenhuma a√ß√£o encontrada com os filtros atuais para an√°lise.")
        return

    ticker_selecionado = st.selectbox(
        "Selecione a A√ß√£o para An√°lise", df['Ticker'].tolist(),
        format_func=lambda t: f"{t} - {df.loc[df['Ticker'] == t, 'Empresa'].iloc[0]}"
    )
    if not ticker_selecionado:
        return

    acao = df[df['Ticker'] == ticker_selecionado].iloc[0]
    st.subheader(f"{acao['Empresa']} ({ticker_selecionado})")

    c1, c2, c3, c4, c5 = st.columns(5)
    c1.metric("Pre√ßo Atual", f"R$ {acao.get('Pre√ßo Atual', 0):.2f}")
    c2.metric("P/L", f"{acao.get('P/L', 0):.2f}")
    c3.metric("P/VP", f"{acao.get('P/VP', 0):.2f}")
    c4.metric("DY 12m", f"{acao.get('DY (Taxa 12m, %)', 0):.2f}%")
    c5.metric("Perfil", acao.get('Perfil da A√ß√£o', 'N/A'))

    c1, c2 = st.columns([1, 1])
    with c1:
        st.subheader("Composi√ß√£o do Score")
        with st.container():
            details_html = ""
            for detail in acao.get('Score Details', []):
                details_html += f"<p style='margin-bottom: 0.5rem;'>‚Ä¢ {detail}</p>"

            card_content = f'''
            <div class="analise-individual-container">
                <div data-testid="stMetric" style="background-color: transparent; border: none; padding: 0; box-shadow: none;">
                    <label data-testid="stMetricLabel" style="color: var(--text-light-color);">Score Total</label>
                    <div data-testid="stMetricValue" style="font-size: 2rem; font-weight: 700; color: var(--secondary-color);">{acao.get('Score Total', 0):.0f} / 200</div>
                </div>
                {details_html}
            </div>
            '''
            st.markdown(card_content, unsafe_allow_html=True)

    with c2:
        st.subheader("Sentimento dos Analistas")
        rec_cols = ['Strong Buy', 'Buy', 'Hold', 'Sell', 'Strong Sell']
        if all(col in acao.index for col in rec_cols) and acao[rec_cols].sum() > 0:
            rec_df = pd.DataFrame(acao[rec_cols]).reset_index()
            rec_df.columns = ['Recomenda√ß√£o', 'Contagem']
            fig = px.bar(rec_df, x='Contagem', y='Recomenda√ß√£o', orientation='h',
                         title='Distribui√ß√£o das Recomenda√ß√µes', text='Contagem')
            fig.update_traces(marker_color='#D4AF37') # Cor dourada
            fig.update_layout(showlegend=False, yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("N√£o h√° dados de recomenda√ß√£o de analistas para este ativo.")

def render_tab_guia():
    st.header("üß≠ Guia da B√∫ssola de Valor")
    st.markdown("Entenda a metodologia por tr√°s do score e dos conceitos de investimento baseados nos princ√≠pios de **Barsi, Bazin, Buffett, Lynch e Graham**.")

    st.subheader("Crit√©rios de Pontua√ß√£o (Score)")
    st.markdown('''
    A pontua√ß√£o de cada a√ß√£o √© calculada somando-se os pontos de diversos crit√©rios fundamentalistas, totalizando um m√°ximo de **200 pontos**. Abaixo, detalhamos cada crit√©rio e sua relev√¢ncia.
    ''')

    with st.expander("1. Dividend Yield (DY) - At√© 45 pontos"):
        st.markdown('''
        - **O que √©?** O Dividend Yield (DY) representa o retorno em dividendos pago pela a√ß√£o, dividido pelo seu pre√ßo. A m√©dia de 5 anos reflete a consist√™ncia dos pagamentos.
        - **Por que analisar?** √â o principal indicador para investidores focados em renda passiva, como defendido por **Luiz Barsi**. Um DY alto e consistente indica uma \"vaca leiteira\" ‚Äì empresas que geram fluxo de caixa est√°vel.
        - **C√°lculo do Score:**
            - **DY 12 meses:** 
                - > 5%: **+20 pontos**
                - 3.5%‚Äì5%: **+15 pontos**
                - 2%‚Äì3.5%: **+10 pontos**
                - < 2% (e > 0%): **-5 pontos**
            - **DY M√©dia 5 Anos:** 
                - > 8%: **+25 pontos**
                - 6%‚Äì8%: **+20 pontos**
                - 4%‚Äì6%: **+10 pontos**
        ''')

    with st.expander("2. Valuation (P/L e P/VP) - At√© 35 pontos"):
        st.markdown('''
        - **O que s√£o?** P/L (Pre√ßo/Lucro) e P/VP (Pre√ßo/Valor Patrimonial) s√£o indicadores de valuation, popularizados por **Benjamin Graham**, para avaliar se uma a√ß√£o est√° \"barata\" em rela√ß√£o aos lucros ou patrim√¥nio.
        - **Por que analisar?** Comprar ativos abaixo de seu valor intr√≠nseco √© a ess√™ncia do *Value Investing*, criando uma margem de seguran√ßa contra a volatilidade do mercado.
        - **C√°lculo do Score:**
            - **P/L:**
                - < 12: **+15 pontos**
                - 12‚Äì18: **+10 pontos**
                - > 25: **-5 pontos**
            - **P/VP:**
                - < 0.66: **+20 pontos**
                - 0.66‚Äì1.5: **+10 pontos**
                - 1.5‚Äì2.5: **+5 pontos**
                - > 4: **-5 pontos**
        ''')

    with st.expander("3. Rentabilidade e Gest√£o (ROE e Payout) - At√© 35 pontos"):
        st.markdown('''
        - **O que s√£o?** ROE (Return on Equity) mede a efici√™ncia da empresa em gerar lucro com o capital pr√≥prio. Payout √© a porcentagem do lucro distribu√≠da como dividendos.
        - **Por que analisar?** Um ROE alto, valorizado por **Warren Buffett**, indica boa gest√£o e vantagens competitivas. Um Payout equilibrado mostra que a empresa remunera acionistas sem comprometer o reinvestimento.
        - **C√°lculo do Score:**
            - **ROE (Setor Financeiro):**
                - > 15%: **+25 pontos**
                - 12%‚Äì15%: **+20 pontos**
                - 8%‚Äì12%: **+10 pontos**
            - **ROE (Outros Setores):**
                - > 12%: **+15 pontos**
                - 8%‚Äì12%: **+5 pontos**
            - **Payout:**
                - 30%‚Äì60%: **+10 pontos**
                - 60%‚Äì80%: **+5 pontos**
                - < 20% ou > 80%: **-5 pontos**
        ''')

    with st.expander("4. Sa√∫de Financeira (Endividamento) - At√© 20 pontos"):
        st.markdown('''
        - **O que √©?** Avalia a d√≠vida da empresa em rela√ß√£o ao seu valor de mercado (D√≠vida/Market Cap) e gera√ß√£o de caixa (D√≠vida/EBITDA). *N√£o se aplica ao setor financeiro.*
        - **Por que analisar?** Empresas com d√≠vidas controladas s√£o mais resilientes a crises e t√™m maior flexibilidade para crescer e pagar dividendos, um princ√≠pio valorizado por **Bazin** e **Graham**.
        - **C√°lculo do Score:**
            - **D√≠vida/Market Cap:**
                - < 0.5: **+10 pontos**
                - 0.5‚Äì1.0: **+5 pontos**
                - > 2.0: **-5 pontos**
            - **D√≠vida/EBITDA:**
                - < 1: **+10 pontos**
                - 1‚Äì2: **+5 pontos**
                - > 6: **-5 pontos**
        ''')

    with st.expander("5. Crescimento e Sentimento - At√© 25 pontos"):
        st.markdown('''
        - **O que s√£o?** Crescimento do pre√ßo da a√ß√£o nos √∫ltimos 5 anos e a recomenda√ß√£o consolidada de analistas (Sentimento Gauge).
        - **Por que analisar?** O crescimento hist√≥rico reflete a valoriza√ß√£o do ativo, enquanto o sentimento de mercado, enfatizado por **Peter Lynch**, adiciona uma camada de an√°lise sobre a percep√ß√£o atual.
        - **C√°lculo do Score:**
            - **Crescimento Pre√ßo 5 Anos:**
                - > 15%: **+15 pontos**
                - 10%‚Äì15%: **+10 pontos**
                - 5%‚Äì10%: **+5 pontos**
                - < 0%: **-5 pontos**
            - **Sentimento do Mercado:** 
                - Varia de **-5 a +10 pontos**, proporcional √† nota de 0 a 100.
        ''')

    with st.expander("6. Ciclo de Mercado e F√≥rmula de Graham - At√© +35 pontos"):
        st.markdown('''
        - **O que s√£o?** O **Ciclo de Mercado** usa indicadores t√©cnicos (RSI, MACD, Volume) para avaliar o *timing* psicol√≥gico do mercado. A **F√≥rmula de Graham** calcula o \"pre√ßo justo\" (`‚àö(22.5 * LPA * VPA)`) para encontrar a margem de seguran√ßa.
        - **Por que analisar?** Juntos, eles respondem \"o qu√™ comprar\" (Graham) e \"quando comprar\" (Ciclo). Comprar ativos com alta margem de seguran√ßa durante per√≠odos de p√¢nico √© uma estrat√©gia poderosa.
        - **C√°lculo do Score (Ciclo):**
            - Compra (P√¢nico): **+15 pontos**
            - Observa√ß√£o (Neutro): **0 pontos**
            - Venda (Euforia): **-15 pontos**
        - **C√°lculo do Score (Graham):**
            - Margem > 100%: **+20 pontos**
            - Margem 50% a 100%: **+15 pontos**
            - Margem 20% a 50%: **+10 pontos**
            - Margem 0% a 20%: **+5 pontos**
            - Margem < 0%: **-10 pontos**
        ''')

    st.markdown("---")
    st.subheader("Guia de Perfil da A√ß√£o")
    st.markdown('''
A classifica√ß√£o por perfil ajuda a entender o porte, o risco e o potencial de cada empresa com base no **Valor de Mercado (Market Cap)** e **Pre√ßo por A√ß√£o**.
    ''')
    with st.expander("Como o Perfil √© Calculado?"):
        st.markdown('''
        - **Penny Stock:** Pre√ßo da A√ß√£o < R$ 1,00.
        - **Micro Cap:** Valor de Mercado < R$ 2 bilh√µes.
        - **Small Cap:** Valor de Mercado entre R$ 2 bilh√µes e R$ 10 bilh√µes.
        - **Mid Cap:** Valor de Mercado entre R$ 10 bilh√µes e R$ 50 bilh√µes.
        - **Blue Chip:** Valor de Mercado > R$ 50 bilh√µes.
        ''')



def render_tab_dividendos(df: pd.DataFrame, all_data: dict, ticker_foco: str = None):
    st.header("üîç An√°lise de Dividendos")
    
    todos_dividendos = all_data.get('todos_dividendos', pd.DataFrame())
    dividend_yield_extra = all_data.get('dividend_yield', pd.DataFrame())

    if dividend_yield_extra.empty:
        st.warning("Arquivo 'dividend_yield.csv' n√£o encontrado ou vazio.")
        return

    # Filtra os dados de dividend yield com base nos tickers do dataframe filtrado principal
    filtered_tickers = df['Ticker'].unique()
    dy_data = dividend_yield_extra[dividend_yield_extra['ticker'].isin(filtered_tickers)].copy()

    st.subheader("Calend√°rio de Dividendos por M√™s")
    if not todos_dividendos.empty and ticker_foco:
        serie_foco = todos_dividendos[todos_dividendos['ticker_base'] == ticker_foco].copy()
        if not serie_foco.empty:
            serie_foco['Data'] = pd.to_datetime(serie_foco['Data'], errors='coerce')
            serie_foco['Mes'] = serie_foco['Data'].dt.month

            # Contar a frequ√™ncia de dividendos por m√™s
            dividendos_por_mes = serie_foco['Mes'].value_counts().sort_index()
            
            # Criar DataFrame para o Plotly
            df_meses = pd.DataFrame({
                'Mes': range(1, 13),
                'Frequencia': [dividendos_por_mes.get(m, 0) for m in range(1, 13)]
            })
            
            # Mapear n√∫meros dos meses para nomes
            nomes_meses = {
                1: 'Jan', 2: 'Fev', 3: 'Mar', 4: 'Abr', 5: 'Mai', 6: 'Jun',
                7: 'Jul', 8: 'Ago', 9: 'Set', 10: 'Out', 11: 'Nov', 12: 'Dez'
            }
            df_meses['Nome_Mes'] = df_meses['Mes'].map(nomes_meses)

            fig_heatmap = px.bar(df_meses, 
                                 x='Nome_Mes', 
                                 y='Frequencia', 
                                 title=f"Frequ√™ncia de Dividendos por M√™s - {ticker_foco}",
                                 labels={'Nome_Mes': 'M√™s', 'Frequencia': 'N√∫mero de Pagamentos'},
                                 color='Frequencia', # Adiciona calor baseado na frequ√™ncia
                                 color_continuous_scale=px.colors.sequential.Plasma) # Escala de cor
            fig_heatmap.update_layout(margin=dict(l=20, r=20, t=50, b=20))
            st.plotly_chart(fig_heatmap, use_container_width=True)
        else:
            st.info(f"N√£o h√° dados de dividendos para o ticker {ticker_foco}.")
    elif not ticker_foco:
        st.info("Selecione um ticker na barra lateral para ver a frequ√™ncia de dividendos por m√™s.")
    else:
        st.warning("Dados de 'todos_dividendos.csv' n√£o encontrados.")

    st.subheader("S√©rie Temporal de Dividendos")
    if not todos_dividendos.empty and ticker_foco:
        serie = todos_dividendos[todos_dividendos['ticker_base'] == ticker_foco].copy()
        if not serie.empty:
            serie['Data'] = pd.to_datetime(serie['Data'], errors='coerce')
            fig_div = px.line(serie.sort_values('Data'), x='Data', y='Valor', title=f"Dividendos ao longo do tempo - {ticker_foco}")
            fig_div.update_layout(margin=dict(l=20, r=20, t=50, b=20))
            st.plotly_chart(fig_div, use_container_width=True)
        else:
            st.info(f"N√£o h√° dados de dividendos para o ticker {ticker_foco}.")
    elif not ticker_foco:
        st.info("Selecione um ticker na barra lateral para ver a s√©rie temporal de dividendos.")
    else:
        st.warning("Dados de 'todos_dividendos.csv' n√£o encontrados.")

    st.divider() 
    
    if not dy_data.empty:
        st.subheader("Top 20 Maiores Pagadores (12M)")
        dy_data['DY12M'] = pd.to_numeric(dy_data['DY12M'], errors='coerce').fillna(0)
        top12 = dy_data.nlargest(20, 'DY12M')
        fig12 = px.bar(top12.sort_values('DY12M'), 
                     x='DY12M', 
                     y='ticker', 
                     orientation='h', 
                     title='Top 20: Maiores DY 12 Meses', 
                     text='DY12M')
        fig12.update_traces(texttemplate='%{text:.2f}%', textposition='inside')
        fig12.update_layout(margin=dict(l=20, r=20, t=50, b=20), 
                          xaxis_title="Dividend Yield (12M) %",
                          yaxis_title="Ticker")
        st.plotly_chart(fig12, use_container_width=True)

        st.subheader("Top 20 Maiores Pagadores (5 Anos)")
        dy_data['DY5anos'] = pd.to_numeric(dy_data['DY5anos'], errors='coerce').fillna(0)
        top_5y = dy_data.nlargest(20, 'DY5anos')
        fig_5y = px.bar(top_5y.sort_values('DY5anos'), 
                      x='DY5anos', 
                      y='ticker', 
                      orientation='h', 
                      title='Top 20: Maiores DY 5 Anos (M√©dia)', 
                      text='DY5anos')
        fig_5y.update_traces(texttemplate='%{text:.2f}%', textposition='inside')
        fig_5y.update_layout(margin=dict(l=20, r=20, t=50, b=20), 
                           xaxis_title="Dividend Yield (5 Anos M√©dia) %",
                           yaxis_title="Ticker")
        st.plotly_chart(fig_5y, use_container_width=True)
    else:
        st.info("Nenhuma a√ß√£o encontrada com os filtros atuais para exibir os gr√°ficos de maiores pagadores.")
        
    

def render_tabs(df_unfiltered: pd.DataFrame, df_filtrado: pd.DataFrame, all_data: dict, ticker_foco: str = None):
    """Cria e gerencia o conte√∫do de todas as abas da aplica√ß√£o."""
    from .calculadora import render_tab_calculadora
    tab_titles = [
        "üèÜ Ranking", "üìã Indices", "üî¨ An√°lise",
        "üîç Dividendos", "üìà Ciclo de mercado",
        "üèóÔ∏è Setores", "‚öñÔ∏è Recupera√ß√£o Judicial", "üß≠ Guia da B√∫ssola", "üí∞ Calculadora"
    ]
    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9 = st.tabs(tab_titles)

    with tab1:
        render_tab_rank_geral(df_filtrado)
    with tab2:
        render_tab_rank_detalhado(df_filtrado)
    with tab3:
        render_tab_analise_individual(df_filtrado)
    with tab4:
        render_tab_dividendos(df_filtrado, all_data, ticker_foco)
    with tab5:
        render_tab_ciclo_mercado(df_unfiltered, all_data)
    with tab6:
        render_tab_rank_setores(df_filtrado, all_data)
    with tab7:
        render_tab_recuperacao_judicial(all_data)
    with tab8:
        render_tab_guia()
    with tab9:
        render_tab_calculadora(all_data, ticker_foco)
        
    

def render_tab_rank_setores(df_filtrado: pd.DataFrame, all_data: dict):
    st.header("üèóÔ∏è An√°lise de Setores")

    av_setor = all_data.get('avaliacao_setor', pd.DataFrame())
    if not av_setor.empty:
        st.subheader("Ranking de Setores por Pontua√ß√£o M√©dia")
        st.markdown("Esta tabela classifica os subsetores com base em uma pontua√ß√£o final que considera o desempenho m√©dio de suas a√ß√µes, a penalidade por recupera√ß√£o judicial e o dividend yield m√©dio dos √∫ltimos 5 anos.")

        av_display = av_setor.rename(columns={
            'subsetor_b3': 'Subsetor',
            'pontuacao_original_subsetor': 'Pontua√ß√£o Original',
            'penalidade_rj': 'Penalidade (RJ)',
            'dy_5a_subsetor': 'DY 5 Anos Setor (%)',
            'pontuacao_subsetor': 'Pontua√ß√£o Final'
        }).sort_values('Pontua√ß√£o Final', ascending=False)

        cols_to_show = ['Subsetor', 'Pontua√ß√£o Original', 'Penalidade (RJ)', 'DY 5 Anos Setor (%)', 'Pontua√ß√£o Final']
        if 'Pontua√ß√£o Original' not in av_display.columns:
            cols_to_show.remove('Pontua√ß√£o Original')
        if 'Penalidade (RJ)' not in av_display.columns:
            cols_to_show.remove('Penalidade (RJ)')
        if 'DY 5 Anos Setor (%)' not in av_display.columns:
            cols_to_show.remove('DY 5 Anos Setor (%)')

        styler = av_display[cols_to_show].style.map(style_pontuacao_final, subset=['Pontua√ß√£o Final'])

        st.dataframe(
            styler,
            use_container_width=True,
            hide_index=True,
            column_config={
                'Pontua√ß√£o Original': st.column_config.NumberColumn('Pontua√ß√£o Original', format='%.1f', help="Pontua√ß√£o m√©dia dos ativos do setor, antes da penalidade."),
                'Penalidade (RJ)': st.column_config.NumberColumn('Penalidade', format='-%.1f', help="Penalidade subtra√≠da da pontua√ß√£o original devido ao hist√≥rico de RJs do setor."),
                'DY 5 Anos Setor (%)': st.column_config.NumberColumn('DY 5 Anos (%)', format='%.2f%%', help="M√©dia do Dividend Yield dos √∫ltimos 5 anos para o setor."),
                'Pontua√ß√£o Final': st.column_config.NumberColumn('Pontua√ß√£o Final', format='%.1f', help="Pontua√ß√£o final do setor ap√≥s a aplica√ß√£o da penalidade e b√¥nus de dividendos.")
            }
        )
        
        fig = px.bar(av_display.sort_values('Pontua√ß√£o Final'), x='Pontua√ß√£o Final', y='Subsetor', orientation='h', title='<b>Desempenho Relativo dos Setores</b>')
        fig.update_layout(margin=dict(l=20, r=20, t=50, b=20))
        st.plotly_chart(fig, use_container_width=True)
        st.divider()

    else:
        st.warning("Arquivo 'avaliacao_setor.csv' n√£o encontrado para gerar o ranking.")

    # Adicionado Top 15 por Score
    if not df_filtrado.empty:
        st.subheader("Top 15 A√ß√µes por Score (Filtro Atual)")
        top = df_filtrado.nlargest(15, 'Score Total')
        fig_bar = px.bar(top.sort_values('Score Total'), x='Score Total', y='Ticker', orientation='h', color='subsetor_b3', hover_data=['Empresa'])
        fig_bar.update_layout(margin=dict(l=20, r=20, t=50, b=20), legend_title_text='Setor')
        st.plotly_chart(fig_bar, use_container_width=True)
    
    st.divider()
    st.subheader("An√°lise Qualitativa dos Setores (Foco em Dividendos)")
    st.markdown('''
Abaixo, apresentamos uma an√°lise qualitativa de cada setor, com motivos para investir e pontos de aten√ß√£o, especialmente para carteiras focadas em renda passiva.
    ''')

    # Dicion√°rio com descri√ß√µes de cada setor
    sector_descriptions = {
        "Petr√≥leo, G√°s e Biocombust√≠veis": {
            "Por que investir?": "Alta gera√ß√£o de caixa em per√≠odos de pre√ßos elevados de commodities, com empresas frequentemente pagando dividendos robustos. Setor estrat√©gico com demanda global constante.",
            "Por que n√£o investir?": "Volatilidade ligada aos pre√ßos internacionais do petr√≥leo e g√°s. Riscos regulat√≥rios e impactos ambientais podem pressionar margens e gerar custos adicionais."
        },
        "Energia El√©trica": {
            "Por que investir?": "Demanda est√°vel e previs√≠vel devido √† essencialidade dos servi√ßos. Contratos de concess√£o longos garantem receita recorrente, ideal para dividendos consistentes.",
            "Por que n√£o investir?": "Forte regula√ß√£o governamental e risco de interfer√™ncia pol√≠tica. Altos investimentos em infraestrutura podem limitar o fluxo de caixa livre."
        },
        "Saneamento": {
            "Por que investir?": "Demanda est√°vel e previs√≠vel devido √† essencialidade dos servi√ßos. Contratos de concess√£o longos garantem receita recorrente, ideal para dividendos consistentes.",
            "Por que n√£o investir?": "Forte regula√ß√£o governamental e risco de interfer√™ncia pol√≠tica. Altos investimentos em infraestrutura podem limitar o fluxo de caixa livre."
        },
        "Bancos, Seguros e Financeiros": {
            "Por que investir?": "Essenciais para a economia, com alta lucratividade e dividendos consistentes. Barreiras regulat√≥rias protegem contra concorr√™ncia, favorecendo estabilidade.",
            "Por que n√£o investir?": "Sens√≠vel a crises econ√¥micas e flutua√ß√µes nas taxas de juros. Concorr√™ncia de fintechs pode reduzir margens no longo prazo."
        },
        "Minera√ß√£o e Siderurgia": {
            "Por que investir?": "Exposi√ß√£o a commodities globais, com potencial de lucros elevados em ciclos de alta. Empresas l√≠deres frequentemente distribuem dividendos atrativos.",
            "Por que n√£o investir?": "Alta volatilidade devido √† depend√™ncia de pre√ßos internacionais. Custos elevados de opera√ß√£o e riscos ambientais podem impactar resultados."
        },
        "Papel, Qu√≠mica e Outros": {
            "Por que investir?": "Demanda constante por produtos essenciais, como papel e qu√≠micos industriais. Algumas empresas oferecem dividendos est√°veis devido a opera√ß√µes consolidadas.",
            "Por que n√£o investir?": "Exposi√ß√£o a custos de mat√©ria-prima e energia. Concorr√™ncia global pode pressionar margens, especialmente em ciclos econ√¥micos fracos."
        },
        "Servi√ßos Industriais": {
            "Por que investir?": "Suporte a setores essenciais como constru√ß√£o e energia, com contratos de longo prazo que geram receita previs√≠vel e dividendos moderados.",
            "Por que n√£o investir?": "Depend√™ncia de grandes projetos e ciclos econ√¥micos. Margens geralmente mais baixas e sensibilidade a crises setoriais."
        },
        "M√°quinas e Equipamentos Industriais": {
            "Por que investir?": "Demanda por equipamentos em setores de crescimento, como infraestrutura e manufatura. Empresas bem geridas podem oferecer dividendos est√°veis.",
            "Por que n√£o investir?": "Alta depend√™ncia de investimentos industriais e ciclos econ√¥micos. Concorr√™ncia internacional pode limitar crescimento."
        },
        "Servi√ßos Comerciais": {
            "Por que investir?": "Diversifica√ß√£o de servi√ßos, incluindo consultoria e marketing, com algumas empresas oferecendo dividendos consistentes em nichos est√°veis.",
            "Por que n√£o investir?": "Alta concorr√™ncia e margens reduzidas. Depend√™ncia de contratos espec√≠ficos pode levar a volatilidade nos lucros."
        },
        "Com√©rcio Varejista": {
            "Por que investir?": "Demanda resiliente por bens de consumo, com algumas empresas oferecendo dividendos moderados. Setor beneficia-se de crescimento econ√¥mico.",
            "Por que n√£o investir?": "Concorr√™ncia intensa, especialmente do e-commerce. Sensibilidade a mudan√ßas no consumo e margens geralmente apertadas."
        },
        "Alimentos, Bebidas e Higiene": {
            "Por que investir?": "Demanda inel√°stica por produtos essenciais, garantindo receita est√°vel. Empresas l√≠deres pagam dividendos consistentes.",
            "Por que n√£o investir?": "Concorr√™ncia global e press√£o de custos de mat√©ria-prima. Margens podem ser comprimidas por infla√ß√£o ou mudan√ßas regulat√≥rias."
        },
        "Tecnologia ‚Äì Hardware": {
            "Por que investir?": "Crescimento impulsionado pela digitaliza√ß√£o e inova√ß√£o tecnol√≥gica. Algumas empresas oferecem dividendos em nichos espec√≠ficos.",
            "Por que n√£o investir?": "Alta volatilidade e necessidade constante de inova√ß√£o. Dividendos geralmente baixos devido ao foco em reinvestimento."
        },
        "Bens Dur√°veis (Eletro e Autos)": {
            "Por que investir?": "Demanda por eletrodom√©sticos e autom√≥veis em mercados emergentes. Empresas consolidadas podem oferecer dividendos moderados.",
            "Por que n√£o investir?": "Ciclos econ√¥micos afetam fortemente a demanda. Concorr√™ncia global e custos elevados de produ√ß√£o limitam margens."
        },
        "Telefonia, Internet e M√≠dia": {
            "Por que investir?": "Servi√ßo essencial na era digital, com receitas recorrentes via assinaturas. Barreiras de entrada protegem empresas estabelecidas.",
            "Por que n√£o investir?": "Alta concorr√™ncia e necessidade de investimentos em tecnologias como 5G. Regula√ß√£o intensa pode limitar lucros."
        },
        "Tecnologia ‚Äì Software": {
            "Por que investir?": "Crescimento r√°pido devido √† transforma√ß√£o digital. Modelos de assinatura geram receita recorrente em algumas empresas.",
            "Por que n√£o investir?": "Dividendos raros devido ao foco em reinvestimento. Alta volatilidade e competi√ß√£o no setor tecnol√≥gico."
        },
        "Distribui√ß√£o e Com√©rcio": {
            "Por que investir?": "Demanda est√°vel por bens essenciais, com algumas empresas oferecendo dividendos moderados devido a opera√ß√µes consolidadas.",
            "Por que n√£o investir?": "Margens baixas e concorr√™ncia acirrada. Depend√™ncia de cadeias de suprimento pode gerar riscos operacionais."
        },
        "Sa√∫de ‚Äì Tecnologia e Equipamentos": {
            "Por que investir?": "Crescimento impulsionado por inova√ß√£o e demanda por equipamentos m√©dicos. Algumas empresas oferecem dividendos est√°veis.",
            "Por que n√£o investir?": "Altos custos de pesquisa e desenvolvimento. Dividendos limitados devido √† necessidade de reinvestimento."
        },
        "Transporte e Log√≠stica": {
            "Por que investir?": "Essencial para cadeias globais de suprimento, com algumas empresas oferecendo dividendos em nichos est√°veis como log√≠stica portu√°ria.",
            "Por que n√£o investir?": "Alta sensibilidade a custos de combust√≠vel e ciclos econ√¥micos. Margens apertadas e necessidade de investimentos em infraestrutura."
        },
        "Sa√∫de ‚Äì Servi√ßos M√©dicos": {
            "Por que investir?": "Demanda crescente por servi√ßos de sa√∫de, com receitas est√°veis em hospitais e cl√≠nicas. Algumas empresas pagam dividendos moderados.",
            "Por que n√£o investir?": "Regula√ß√£o intensa e custos operacionais elevados. Concorr√™ncia e riscos legais podem impactar lucros."
        },
        "Servi√ßos de Educa√ß√£o e Turismo": {
            "Por que investir?": "Crescimento em mercados emergentes e demanda por educa√ß√£o. Algumas empresas podem oferecer dividendos em nichos espec√≠ficos.",
            "Por que n√£o investir?": "Alta sensibilidade a crises econ√¥micas e mudan√ßas no comportamento do consumidor. Dividendos raros e margens geralmente baixas."
        }
    }

    # Exibir an√°lise setorial ordenada pelo CSV
    if not av_setor.empty:
        for _, row in av_display.iterrows():
            subsetor = row['Subsetor']
            pontuacao = row['Pontua√ß√£o Final']
            desc = sector_descriptions.get(subsetor, {
                "Por que investir?": "Informa√ß√µes espec√≠ficas n√£o dispon√≠veis. Setor pode oferecer oportunidades dependendo das condi√ß√µes de mercado.",
                "Por que n√£o investir?": "Riscos espec√≠ficos n√£o detalhados. Considere avaliar a volatilidade e a estabilidade de dividendos."
            })
            with st.container(border=True):
                st.markdown(f"<h5>{subsetor} <span style='float: right; font-size: 0.9rem; color: #ffaa00;'>Pontua√ß√£o: {pontuacao:.2f}</span></h5>", unsafe_allow_html=True)
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"‚úÖ **Por que investir?**")
                    st.markdown(f"<p style='font-size: 0.9rem;'>{desc['Por que investir?']}</p>", unsafe_allow_html=True)
                with col2:
                    st.markdown(f"‚ùå **Por que n√£o investir?**")
                    st.markdown(f"<p style='font-size: 0.9rem;'>{desc['Por que n√£o investir?']}</p>", unsafe_allow_html=True)
    else:
        st.warning("N√£o foi poss√≠vel carregar as an√°lises setoriais devido √† aus√™ncia de dados no arquivo 'avaliacao_setor.csv'.")
    
def render_tab_recuperacao_judicial(all_data: dict):
    st.header("‚öñÔ∏è Recupera√ß√£o Judicial e Fal√™ncias")
    rj_df = all_data.get('rj', pd.DataFrame())
    setores_df = all_data.get('avaliacao_setor', pd.DataFrame())

    # Garante que todos os setores sejam exibidos, mesmo sem ocorr√™ncias
    if not setores_df.empty and 'subsetor_b3' in setores_df.columns:
        all_setores = pd.DataFrame(setores_df['subsetor_b3'].unique(), columns=['Setor'])
    else:
        st.warning("Arquivo 'avaliacao_setor.csv' n√£o encontrado. A lista de setores pode estar incompleta.")
        all_setores = pd.DataFrame(rj_df['setor'].unique(), columns=['Setor']) if not rj_df.empty else pd.DataFrame(columns=['Setor'])

    if rj_df.empty:
        rj_counts = all_setores.copy()
        rj_counts['Quantidade de Ocorr√™ncias'] = 0
    else:
        ocorrencias = rj_df['setor'].value_counts().reset_index()
        ocorrencias.columns = ['Setor', 'Quantidade de Ocorr√™ncias']
        rj_counts = pd.merge(all_setores, ocorrencias, on='Setor', how='left')
        rj_counts['Quantidade de Ocorr√™ncias'].fillna(0, inplace=True)
        rj_counts['Quantidade de Ocorr√™ncias'] = rj_counts['Quantidade de Ocorr√™ncias'].astype(int)

    # --- C√°lculo da Penalidade (para exibi√ß√£o) ---
    min_ocorrencias = rj_counts['Quantidade de Ocorr√™ncias'].min()
    max_ocorrencias = rj_counts['Quantidade de Ocorr√™ncias'].max()

    def calcular_penalidade(ocorrencias):
        if ocorrencias == 0 or (max_ocorrencias - min_ocorrencias) == 0:
            return 0.0
        penalidade_normalizada = (ocorrencias - min_ocorrencias) / (max_ocorrencias - min_ocorrencias)
        return penalidade_normalizada * 20  # Fator de impacto

    rj_counts['Penalidade (Pontos)'] = rj_counts['Quantidade de Ocorr√™ncias'].apply(calcular_penalidade)

    # Contar ocorr√™ncias por setor
    st.subheader("Ocorr√™ncias por Setor")
    st.dataframe(
        rj_counts.sort_values('Quantidade de Ocorr√™ncias', ascending=False),
        use_container_width=True,
        hide_index=True,
        column_config={
            "Quantidade de Ocorr√™ncias": st.column_config.NumberColumn(
                "Ocorr√™ncias", format="%d", help="N√∫mero de vezes que empresas do setor entraram em RJ ou faliram."
            ),
            "Penalidade (Pontos)": st.column_config.NumberColumn(
                "Penalidade", format="%.2f", help="Penalidade aplicada ao score m√©dio do setor devido ao hist√≥rico de RJs."
            ),
        }
    )

    with st.expander("Como a penalidade √© calculada?"):
        st.markdown(f"""
A pontua√ß√£o de cada setor √© penalizada com base no seu hist√≥rico de recupera√ß√µes judiciais e fal√™ncias para refletir o risco setorial. A f√≥rmula √©:

        1.  **Contagem de Ocorr√™ncias**: Contamos quantas empresas de cada setor est√£o na nossa base de dados de RJ/Fal√™ncia.
            - *M√≠nimo de ocorr√™ncias em um setor*: **{min_ocorrencias}**
            - *M√°ximo de ocorr√™ncias em um setor*: **{max_ocorrencias}**

        2.  **Penalidade Normalizada**: O n√∫mero de ocorr√™ncias de um setor √© normalizado em uma escala de 0 a 1.
            - `Penalidade Normalizada = (Ocorr√™ncias do Setor - M√≠nimo) / (M√°ximo - M√≠nimo)`

        3.  **Penalidade Ajustada**: A penalidade normalizada √© multiplicada por um fator de impacto de **20 pontos**.
            - `Penalidade Ajustada = Penalidade Normalizada * 20`

        4.  **Pontua√ß√£o Final do Setor**: A penalidade ajustada √© subtra√≠da da pontua√ß√£o m√©dia original do setor.
        """)

    st.divider()
    st.subheader(f"Lista de Empresas ({len(rj_df)} encontradas)")

    if rj_df.empty:
        st.info("Nenhuma empresa na lista de recupera√ß√£o judicial ou fal√™ncia.")
        return

    # Seleciona e renomeia colunas para exibi√ß√£o
    cols_to_show = ['nome', 'ticker', 'setor', 'data_entrada_rj', 'data_saida_rj', 'data_falencia', 'duracao_rj']
    df_display = rj_df[[col for col in cols_to_show if col in rj_df.columns]].copy()
    df_display.rename(columns={
        'nome': 'Empresa',
        'ticker': 'Ticker',
        'setor': 'Setor',
        'data_entrada_rj': 'In√≠cio RJ',
        'data_saida_rj': 'Fim RJ',
        'data_falencia': 'Fal√™ncia',
        'duracao_rj': 'Dura√ß√£o'
    }, inplace=True)

    # Formata as colunas de data
    for col in ['In√≠cio RJ', 'Fim RJ', 'Fal√™ncia']:
        if col in df_display.columns:
            df_display[col] = pd.to_datetime(df_display[col], errors='coerce').dt.strftime('%d/%m/%Y')

    # Limpa valores nulos para exibi√ß√£o
    df_display.fillna('-', inplace=True)
    df_display['Ticker'] = df_display['Ticker'].replace({None: '-'})

    st.dataframe(
        df_display.sort_values(by='In√≠cio RJ', ascending=False),
        use_container_width=True,
        hide_index=True
    )

# --- Fun√ß√£o Principal de Renderiza√ß√£o ---

def render_tab_ciclo_mercado(df_unfiltered: pd.DataFrame, all_data: dict):
    st.header("üìà Ciclo de mercado")
    df_ciclo_raw = all_data.get('ciclo_mercado', pd.DataFrame())
    df_setor = all_data.get('avaliacao_setor', pd.DataFrame())

    if df_ciclo_raw.empty:
        st.warning("Arquivo 'ciclo_mercado.csv' n√£o encontrado ou sem dados. Execute o pipeline ou o script 11-ciclo_mercado.py para gerar os dados.")
        return

    # Renomear coluna de status e fazer merge para obter o subsetor do df_unfiltered
    df_ciclo = df_ciclo_raw.rename(columns={'Status üü¢üî¥': 'Status'})
    
    # Use df_unfiltered to get subsetor_b3 for all tickers
    ticker_col_name = 'Ticker' if 'Ticker' in df_unfiltered.columns else 'ticker_base' 
    
    if 'subsetor_b3' not in df_ciclo.columns and ticker_col_name in df_unfiltered.columns and 'subsetor_b3' in df_unfiltered.columns:
        df_ciclo = pd.merge(
            df_ciclo,
            df_unfiltered[[ticker_col_name, 'subsetor_b3']].drop_duplicates(),
            left_on='ticker',  # Coluna em df_ciclo (min√∫sculo)
            right_on=ticker_col_name, # Coluna em df_unfiltered (pode ser 'Ticker' ou 'ticker_base')
            how='left'         # Mant√©m todos os dados de ciclo
        )

    if 'subsetor_b3' not in df_ciclo.columns or df_ciclo['subsetor_b3'].isnull().all():
        st.warning("N√£o foi poss√≠vel obter a informa√ß√£o de subsetor para os dados de ciclo de mercado.")
        # Mostra a tabela original como fallback
        with st.expander("Ver dados completos do Ciclo de Mercado"):
            st.dataframe(
                df_ciclo_raw,
                use_container_width=True,
                hide_index=True,
                column_config={"Score üìà": st.column_config.NumberColumn("Score üìà", format="%d")}
            )
        return

    # --- Criar a tabela de resumo ---
    st.subheader("Resumo do Status por Setor")
    
    # Contar os status por subsetor
    status_counts = pd.crosstab(df_ciclo['subsetor_b3'], df_ciclo['Status'])
    
    # Renomear colunas
    status_counts = status_counts.rename(columns={
        'Compra': 'qtde_compra',
        'Observa√ß√£o': 'qtde_observacao',
        'Venda': 'qtde_venda'
    })
    
    # Garantir que todas as colunas de status existam
    for col in ['qtde_compra', 'qtde_observacao', 'qtde_venda']:
        if col not in status_counts.columns:
            status_counts[col] = 0
            
    status_counts = status_counts.reset_index()

    # Preparar o dataframe de pontua√ß√£o do setor
    if not df_setor.empty:
        df_setor_scores = df_setor[['subsetor_b3', 'pontuacao_subsetor']].drop_duplicates()
        summary_df = pd.merge(status_counts, df_setor_scores, on='subsetor_b3', how='left')
        summary_df = summary_df.rename(columns={
            'subsetor_b3': 'Subsetor',
            'pontuacao_subsetor': 'pontua√ß√£o do setor'
        })
    else:
        summary_df = status_counts.rename(columns={'subsetor_b3': 'Subsetor'})
        summary_df['pontua√ß√£o do setor'] = 'N/A'

    # Calcular o Momentum Score
    summary_df['total_ativos'] = summary_df['qtde_compra'] + summary_df['qtde_observacao'] + summary_df['qtde_venda']
    # Avoid division by zero
    summary_df['Momentum Score'] = summary_df.apply(
        lambda row: ((row['qtde_compra'] * 1) + (row['qtde_venda'] * -1)) / row['total_ativos'] if row['total_ativos'] != 0 else 0,
        axis=1
    )
    
    # Reordenar colunas
    summary_df = summary_df[['Subsetor', 'pontua√ß√£o do setor', 'Momentum Score', 'qtde_compra', 'qtde_observacao', 'qtde_venda']]
    
    # Ordenar pela pontua√ß√£o do setor
    if 'pontua√ß√£o do setor' in summary_df.columns and pd.api.types.is_numeric_dtype(summary_df['pontua√ß√£o do setor']):
        summary_df = summary_df.sort_values(by='pontua√ß√£o do setor', ascending=False)


    st.dataframe(
        summary_df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "pontua√ß√£o do setor": st.column_config.NumberColumn("Pontua√ß√£o", format="%.2f"),
            "Momentum Score": st.column_config.NumberColumn("Momentum", format="%.2f"),
            "qtde_compra": st.column_config.NumberColumn("Compra"),
            "qtde_observacao": st.column_config.NumberColumn("Observa√ß√£o"),
            "qtde_venda": st.column_config.NumberColumn("Venda"),
        }
    )

    st.divider()

    st.subheader("Dados completos do Ciclo de Mercado")
    st.dataframe(
        df_ciclo_raw,
        use_container_width=True,
        hide_index=True,
        column_config={"Score üìà": st.column_config.NumberColumn("Score üìà", format="%d")}
    )
